#,Категория сценария тестирования,Категория тестового действия,Описание действия теста
1,Основные позитивные тесты (позитивный путь по умолчанию),,
,"Выполнить вызов API с валидными обязательными параметрами

 POST http://host:80/CreateUser  
{ ""Name"": ""Ivan""}  
 201  ОК {""id"": ""001""}

GET http://host:80/GetUser  
{ ""id"": ""001""}  
200 ОК{ ""Name"": ""Ivan"", ""Age"": 32}

POST http://host:80/SetUserAge 
{""id"": ""001"",  ""Age "": 33}
200 ОК

GET http://host:80/001/GetAgeGroupById
200 ОК
{ ""AgeGroup"": ""Adult""}






",Проверить код состояния:,"1. Все запросы должны возвращать код состояния HTTP 2XX.
 2. Код статуса возвращен согласно спецификации: 
  – 200 ОК для запросов GET
  – 201 для запросов POST или PUT, создающих новый ресурс
  – 200, 202, или 204 для операции DELETE и т. д."
,,Подтвердить загрузку ответа:,"1. Ответ - это правильно сформированный объект JSON.
 2. Структура ответа соответствует модели данных (проверка схемы: имена и типы полей соответствуют ожидаемым, 
включая вложенные объекты; значения полей соответствуют ожидаемым; поля, не допускающие значения NULL, 
не являются пустыми и т. Д.)"
,,Проверить состояние:,"1. Для запросов GET убедитесь, что система НЕ ИЗМЕНИЛА СОСТОЯНИЕ
 2. Для операций POST, DELETE, PATCH, PUT:
  - Убедитесь, что действие в системе было выполнено правильно:
  * Выполнение соответствующего запроса GET и проверка ответа
  * Обновите пользовательский интерфейс в веб-приложении и проверьте новое состояние "
,,Проверить заголовки:,"1. Убедитесь, что заголовки HTTP соответствуют ожидаемым, включая:
  content-type, connection, cache-control, expires, access-control-allow-origin, keep-alive, HSTS,
 и другие стандартные поля заголовка - согласно спецификации
 2. Убедитесь, что информация НЕ утекает через заголовки (например X-Powered-By заголовок не отправляется пользователю)."
,,Проверка производительности:,Ответ получен своевременно (в разумные ожидаемые сроки) - как определено в плане тестирования.
2,Позитивные тесты + необязательные параметры проверок,,
,"Выполнить вызов API с действительными обязательными параметрами  
и действительными необязательными параметрами. Выполните те же
тесты, что и в пункте #1, на этот раз включая дополнительные параметры 
эндпоинта (например, фильтр, сортировку, ограничение, пропуск и т. Д.)",Проверить код состояния:,Как в пункте #1
,,Проверить правильность загрузки:,"1. Проверьте структуру и содержание ответа, как в пункте #1.
 2. Кроме того, проверьте следующие параметры: 
  – фильтрация: убедитесь, что ответ фильтруется по указанному значению.
  – сортировка: укажите поле для сортировки, проверки опций по возрастанию и убыванию. Убедитесь, что ответ отсортирован в соответствии с выбранным полем и направлением сортировки.
  – пропуск: убедитесь, что указанное количество результатов с начала выборки данных пропущено
  – лимитирование: убедитесь, что размер набора данных ограничен указанным пределом.
  – лимитирование + пропуск: тестовая пагинация.
 3. Проверьте комбинации всех необязательных полей (поля + сортировка + ограничение + пропуск) и проверьте ожидаемый ответ."
,,Проверка состояния:,Как в пункте #1
,,Проверка заголовков:,Как в пункте #1
,,Проверка производительности:,Как в пункте #1
3,Негативное тестирование – валидный ввод данных,,
,"Выполнять вызовы API с допустимыми входными данными, которые пытаются 
выполнить незаконные операции.
  – Попытка создать ресурс с уже существующим id 
  – Попытка удалить ресурс, который не существует
  – Попытка обновить ресурс недопустимыми действительными данными 
 И так далее.",Проверить коды состояния:,"1. Убедитесь, что отправлен ошибочный код состояния HTTP (НЕ 2XX)
 2. Убедитесь, что код состояния HTTP соответствует типу ошибки, как определено в спецификации."
,,Проверить правильность загрузки:,"1. Убедитесь, что получен ответ об ошибке
 2. Убедитесь, что формат ошибки соответствует описанному в спецификации. например, ошибка - это допустимый объект JSON или пустая строка (как определено в спецификации)
 3. Убедитесь, что есть четкое и понятное поле сообщения об ошибке/описание ошибки.
 4. Убедитесь, что описание ошибки правильное для данного типа ошибки и соответствует спецификации"
,,Проверка заголовков:,Как в пункте #1
,,Проверка производительности:,"Убедитесь, что ошибка получена своевременно (в разумные ожидаемые сроки)"
4,Негативное тестирование - неверные входные данные,,
,"Требуется выполнять вызовы API с недопустимым вводом, например:
  - Отсутствуют необходимые параметры(отсутствующие поля или обязательные вложенные сущности)
  - Недействительное значение для параметров конечной точки
 И так далее.",Проверить коды состояния:,Как в пункте #1
,,Проверка загрузки:,Как в пункте #1
,,Проверка заголовков:,Как в пункте #1
,,Проверка производительности:,Как в пункте #1
5,Деструктивное тестирование,,
,"Умышленно попытаться вывести API из строя, чтобы проверить его надежность:
  - Некорректный контент в запросе
  - Неверный тип содержимого в загрузке
  - Контент с неправильной структурой
  - Переполнение значений параметровия. Например.:
  а) Попытка создать пользовательскую конфигурацию с заголовком более 200 символов
  б) Попытка GET пользователя с недопустимым UUID длиной 1000 символов
  в) Переполнение тела ответа 
  г) огромный JSON в теле запроса
  - Проверка граничных значений
  - Пустые полезные данные
  - Пустые подобъекты в загрузочных данных
  - Недопустимые символы в параметрах или загрузочных данных
  - Использование неправильных заголовков HTTP (например, Content-Type)
  - Простые тесты параллелизма - одновременные вызовы API, которые пишут в одни и те же ресурсы (DELETE + PATCH, и т.п.)
 Другое исследовательское тестирование",Проверка кодов ответа:,Как в пункте #3. API должен корректно сообщить о выходе из строя.
,,Проверка загрузочных данных:,Как в пункте #3. API должен корректно сообщить о выходе из строя.
,,Проверка заголовков:,Как в пункте #3. API должен корректно сообщить о выходе из строя.
,,Проверка производительности:,Как в пункте #3. API должен корректно сообщить о выходе из строя.
,,,
,,,
,,,
,,,
,,,
,,,
,,,
,,,
,,,
,,,
,,,
,–,,